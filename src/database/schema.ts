/* eslint-disable @typescript-eslint/typedef */

import { pgTable, integer, pgEnum, varchar, boolean, json, timestamp } from 'drizzle-orm/pg-core';

export const logs = {
    'user_created': (email: string): string => `User with email ${email} was successfully created.`,
    'error_creating_user': (email: string): string => `Failed to create user with email ${email}.`,
    'user_deleted': (email: string): string => `User with email ${email} was successfully deleted.`,
    'error_deleting_user': (email: string): string => `Failed to delete user with email ${email}.`,
    'video_generated': (email: string): string => `Video successfully generated by ${email}.`,
    'error_generating_video': (email: string): string => `Failed to generate video by ${email}.`,
    'coin_bought': (coins: number, price: string, email: string): string => `${coins} coins bought at ${price} by ${email}.`,
    'error_buying_coin': (coins: number, price: string, email: string): string => `Failed to buy ${coins} coins at ${price} by ${email}.`,
    'admin:user_role_changed': (admin: string, user: string, role: string): string => `${admin} changed role of ${user} to ${role}.`,
    'admin:error_changing_user_role': (admin: string, user: string, role: string): string => `${admin} failed to change role of ${user} to ${role}.`,
    'admin:user_coin_changed': (admin: string, user: string, coin: number): string => `${admin} changed coin balance of ${user} to ${coin}.`,
    'admin:error_changing_user_coin': (admin: string, user: string, coin: number): string => `${admin} failed to change coin balance of ${user} to ${coin}.`,
};

export const logTypeEnum = pgEnum('type', Object.keys(logs) as [ string, ...string[] ]);
export const userRoleEnum = pgEnum('user_role', [ 'user', 'admin' ]);
export const videoStatusEnum = pgEnum('status', [ 'success', 'pending', 'failed' ]);
export const transactionTypeEnum = pgEnum('type', [ 'global', 'local' ]);

export const Log = pgTable('logs', {
    id: integer().primaryKey().generatedAlwaysAsIdentity(),
    email: varchar({ length: 255 }).notNull(),
    type: logTypeEnum().notNull(),
    message: varchar({ length: 255 }).notNull(),
    timestamp: timestamp().notNull().defaultNow(),
});

export const Package = pgTable('packages', {
    id: integer().primaryKey().generatedAlwaysAsIdentity(),
    coin: integer().notNull(),
    normal_price: integer().notNull(),
    final_price: integer().notNull(),
});

export const User = pgTable('users', {
    id: integer().primaryKey().generatedAlwaysAsIdentity(),
    clerk_id: varchar({ length: 50 }).notNull().unique(),
    email: varchar({ length: 255 }).notNull().unique(),
    role: userRoleEnum().notNull().default('user'),
    coin: integer().notNull().default(2),
    created_at: timestamp().notNull().defaultNow(),
    is_deleted: boolean().notNull().default(false),
    deleted_at: timestamp(),
});

export const Video = pgTable('videos', {
    id: integer().primaryKey().generatedAlwaysAsIdentity(),
    user_id: integer().notNull().references(() => User.id),
    audio_uri: json(),
    image_uri: json(),
    captions: json(),
    created_at: timestamp().notNull().defaultNow(),
});

export const Transaction = pgTable('transactions', {
    id: integer().primaryKey().generatedAlwaysAsIdentity(),
    user_id: integer().notNull().references(() => User.id),
    package_id: integer().notNull().references(() => Package.id),
    type: transactionTypeEnum().notNull(),
    created_at: timestamp().notNull().defaultNow(),
});
